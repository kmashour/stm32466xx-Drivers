
#include <../Inc/STD_TYPES.h>
#include <STM32F446xx.h>
#include <../Inc/RCC_Int.h>
#include <../Inc/RCC_priv.h>


/********************************************************
*  Function Name : MDIO_ErrorStateRccInt
*  Description:clock turn ON/OFF
*  Arguments: 1-clock choice
*             2-clock Enable/disable
*
*  Return : ErrotState
*********************************************************/
ErrorState_t MDIO_ErrorStateRccInt(u8 A_u8CopyClockName ,u8 A_u8CopyClockState)
{
	 ErrorState_t L_u8ErrorStateCheck=ok;


	 /*00-check on desired clock state*/
	 if(A_u8CopyClockState==ENABLE)
	 {/*01-clock turn on*/
		 switch(A_u8CopyClockName)
		 {
			 case HSION:
				 /*1-clear*/
				 (RCC->RCC_CR)&=(0<<HSION);
				 /*2-SET*/
				 (RCC->RCC_CR)|=(1<<HSION);
				 /*3-wait for clock ready bit*/
				 while((((RCC->RCC_CR)&1<<HSIRDY)>>HSIRDY) != RCC_CLOCKNOTREADY);
				 break;
			 case HSEON:
				 /*1-clear*/
				 (RCC->RCC_CR)&=(0<<HSEON);
				 /*2-SET*/
				 (RCC->RCC_CR)|=(1<<HSEON);
				 /*3-wait for clock ready bit*/
				 while((((RCC->RCC_CR)&1<<HSERDY)>>HSERDY) != RCC_CLOCKNOTREADY);
				 break;
			 case PLLON:
				 /*1-clear*/
				 (RCC->RCC_CR)&=(0<<PLLON);
				 /*2-SET*/
				 (RCC->RCC_CR)|=(1<<PLLON);
				 /*3-wait for clock ready bit*/
				 while((((RCC->RCC_CR)&1<<PLLRDY)>>PLLRDY) != RCC_CLOCKNOTREADY );
			 case PLLI2SON:
				 /*1-clear*/
				 (RCC->RCC_CR)&=(0<<PLLI2SON);
				 /*2-SET*/
				 (RCC->RCC_CR)|=(1<<PLLI2SON);
				 /*3-wait for clock ready bit*/
				 while((((RCC->RCC_CR)&1<<PLLI2SRDY)>>PLLI2SRDY) != RCC_CLOCKNOTREADY);
				 break;
			 case PLLSAION:
				 /*1-clear*/
				 (RCC->RCC_CR)&=(0<<PLLSAION);
				 /*2-SET*/
				 (RCC->RCC_CR)|=(1<<PLLSAION);
				 /*3-wait for clock ready bit*/
				 while((((RCC->RCC_CR)&1<<PLLSAIRDY)>>PLLSAIRDY) != RCC_CLOCKNOTREADY);
				 break;
			 default :
				 L_u8ErrorStateCheck=nok;
				 break;

	       }
	 }
	 else if (A_u8CopyClockState==DISABLE)
	 {
		 switch(A_u8CopyClockName)
			 {
				 case HSION:
					 /*1-clear*/
					 (RCC->RCC_CR)&=(0<<HSION);
					 /*2-SET*/
					 (RCC->RCC_CR)|=(0<<HSION);
					 break;
				 case HSEON:
					 /*1-clear*/
					 (RCC->RCC_CR)&=(0<<HSEON);
					 /*2-SET*/
					 (RCC->RCC_CR)|=(0<<HSEON);
					break;
				 case PLLON:
					 /*1-clear*/
					 (RCC->RCC_CR)&=(0<<PLLON);
					 /*2-SET*/
					 (RCC->RCC_CR)|=(0<<PLLON);
					 break;
				 case PLLI2SON:
					 /*1-clear*/
					 (RCC->RCC_CR)&=(0<<PLLI2SON);
					 /*2-SET*/
					 (RCC->RCC_CR)|=(0<<PLLI2SON);
					 break;
				 case PLLSAION:
					 /*1-clear*/
					 (RCC->RCC_CR)&=(0<<PLLSAION);
					 /*2-SET*/
					 (RCC->RCC_CR)|=(0<<PLLSAION);
					 break;
				 default :
					 L_u8ErrorStateCheck=nok;
					 break;

	        }
	 }

	 /*return error state*/
	 return L_u8ErrorStateCheck;
}

/********************************************************
*  Function Name : MDIO_ErrorstateRccSelectSysClock
*  Description: this function is used for clock selection
*  Arguments: 1-clock choice
*             2-clock Enable/disable
*
*  Return : ErrotState
*********************************************************/
ErrorState_t MDIO_ErrorstateRccSelectSysClock(u8 A_u8CopyClockName )
{
	ErrorState_t L_u8ErrorStateCheck=ok;
	switch(A_u8CopyClockName)
	{
		 {
			 switch(A_u8CopyClockName)
			 {
				 case HSION:
					 /*1-clear*/
					 (RCC->RCC_CFGR)&=~(RCC_SW_CLR_MASK <<SW);
					 /*2-SET*/
					 (RCC->RCC_CFGR)|=(RCC_SW_HSI<<SW);
					 break;
				 case HSEON:
					 /*1-clear*/
					 (RCC->RCC_CFGR)&=~(RCC_SW_CLR_MASK <<SW);
					 /*2-SET*/
					 (RCC->RCC_CFGR)|=(RCC_SW_HSE<<SW);
				 case PLLON:
					 /*1-clear*/
					 (RCC->RCC_CFGR)&=~(RCC_SW_CLR_MASK <<SW);
					 /*2-SET*/
					 (RCC->RCC_CFGR)|=(RCC_SW_PLLP<<SW);
					break;
				 default :
					 L_u8ErrorStateCheck=nok;
					 break;
	}
			 return L_u8ErrorStateCheck;

}
/********************************************************
*  Function Name : MDIO_ErrorStateRccPeripheralClockEnbale
*  Description:Peripheral clock Enabling
*  Arguments: 1-Bus name (AHB1 , AHB2 , AHB3 , APB1 , APB2)
*             2-Peripheral name on the bus
*
*  Return : ErrotState
*********************************************************/
ErrorState_t MDIO_ErrorStateRccPeripheralClockEnbale(u8 A_u8CopyBusEnable , u8 A_u8CopyPeripheralEnable)
{
	 ErrorState_t L_u8ErrorStateCheck = ok;

	 /*select bus desired*/
	 switch(A_u8CopyBusEnable)
	 {
		 case AHB1:
		 {
			/*clear*/ /*here the wont matter since we will set but for the generic look*/
			(RCC->RCC_AHB1RSTR)&=(0<< A_u8CopyPeripheralEnable);
			/*set*/
			(RCC->RCC_AHB1RSTR)|=(1<< A_u8CopyPeripheralEnable);
		 }

		 break;
		 case AHB2:
		 {
              /*left intentionally*/
		 }
		 break;
		 case AHB3:
		 {
			 /*left intentionally*/
		 }
		 break;
		 case APB1:
		 {
			 /*left intentionally*/
		 }
		 break;
		 case APB2:
		 {
			 /*left intentionally*/
		 }
		 break;
		 case APB3:
		 {
			 /*left intentionally*/
		 }
		 break;
		 default:
		 L_u8ErrorStateCheck = nok;
		 break;
	 }
	 return  L_u8ErrorStateCheck;

}


/********************************************************
*  Function Name : MDIO_ErrorStateRccPeripheralClockDisable
*  Description:Peripheral clock disabling
*  Arguments: 1-Bus name (AHB1 , AHB2 , AHB3 , APB1 , APB2)
*             2-Peripheral name on the bus
*
*  Return : ErrotState
*********************************************************/
ErrorState_t MDIO_ErrorStateRccPeripheralClockDisable(u8 A_u8CopyBusEnable , u8 A_u8CopyPeripheralEnable)
{
	 ErrorState_t L_u8ErrorStateCheck = ok;

		 /*select bus desired*/
		 switch(A_u8CopyBusEnable)
		 {
			 case AHB1:
			 {
				/*clear*/ /*here the clear step is enough but its a matter of being generic*/
				(RCC->RCC_AHB1RSTR)&=(0<< A_u8CopyPeripheralEnable);
				/*set*/
				(RCC->RCC_AHB1RSTR)|=(0<< A_u8CopyPeripheralEnable);
			 }

			 break;
			 case AHB2:
			 {
	              /*left intentionally*/
			 }
			 break;
			 case AHB3:
			 {
				 /*left intentionally*/
			 }
			 break;
			 case APB1:
			 {
				 /*left intentionally*/
			 }
			 break;
			 case APB2:
			 {
				 /*left intentionally*/
			 }
			 break;
			 case APB3:
			 {
				 /*left intentionally*/
			 }
			 break;

			 default:
			 L_u8ErrorStateCheck = nok;
			 break;
		 }
		 return  L_u8ErrorStateCheck;

}


