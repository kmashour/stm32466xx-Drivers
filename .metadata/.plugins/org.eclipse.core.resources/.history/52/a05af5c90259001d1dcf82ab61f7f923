/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


int Fun_Add(int A , int B , int C , int D);

#define SRAM_START_ 0X20000000UL
#define SRAM_SIZE_  (128*1024)
#define SRAM_END (SRAM_START) + (SRAM_SIZE)
#define STACK_START (SRAM_END)
#define STACK_MSP_START (STACK_START)
#define STACK_MSP_END (STACK_MSP_START - 512)
#define STACK_PSP_START (STACK_MSP_END)
#define STACK_PSP_END  (STACK_PSP_START+512)


int main(void)
{

	/*change current stack pointer to PSP*/
	/*1-Initialize PSP  value with MSR SO WE MUST USE GPRS SINCE MSR DOESNT
	 * WITH IMMEDIATE VALUE
	 * WE CAN'T USE MACROS IN INLINE ASSEMBLY SO WE WIL HAVE TO DEFINE
	 * SYMBOLS IN ASSEMBLY SAME AS #DEF  INE BUT FOR ASSEMBLY
	 * format: .equ symbol,value
	 *
	 * __asm volatile ("LDR R0,=STACK_PSP_START")
	 */
	/*define our symbols*/
	__asm(".equ SRAM_END , ((0x20000000)+(128*1024))");
	__asm(".equ PSP_START , (SRAM_END-512)");
	/*initialize PSP*/
	__asm volatile ("LDR R0,=PSP_START");
	__asm volatile ("MSR PSP , R0") ;
	/*shift current stack pointer to PSP*/
	__asm volatile ("LDR R0 , #2");
	__asm volatile("MSR CONTROL , R0");



    int Ret = Fun_Add(1,2,3,4);
    printf("result=%i",Ret);
	for(;;);


}
int Fun_Add(int A , int B , int C , int D)
{
	return A+B+C+D;
}
